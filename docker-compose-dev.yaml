name: config-manager-dev

services:
  db:
    image: postgres:15-alpine
    restart: always
    container_name: db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: config_manager
      POSTGRES_PORT: 5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d config_manager"]
      interval: 5s
      timeout: 5s
      retries: 3
    ports:
      - 5532:5432 # changed port to 5532. 5432 is used by request-db service
    volumes:
      - pgdata:/var/lib/postgresql/data

  app:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: app
    depends_on:
        db:
          condition: service_healthy
    environment:
        FLASK_DEBUG: True
        FLASK_CONFIG: config.DevelopmentConfig
        FLASK_APP: application.wsgi:app
        SECRET_KEY: replaceinprod
        DATABASE_URL: postgres://postgres:postgres@db:5432/config_manager
        POSTGRES_HOST: db
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
        POSTGRES_DB: config_manager
        POSTGRES_PORT: 5432
    ports:
      - 5000:5000
      - 3000:3000
      - 3001:3001
    command: >
      sh -c "npm install && make upgrade-db && npx concurrently -k 'make run' 'make watch'"
    volumes:
      - .:/app

  # localstack:
  #   container_name: "${LOCALSTACK_DOCKER_NAME:-localstack-main}"
  #   image: localstack/localstack:3.1
  #   ports:
  #     - "127.0.0.1:4566:4566"            # LocalStack Gateway
  #     - "127.0.0.1:4510-4559:4510-4559"  # external services port range
  #   environment:
  #     # LocalStack configuration: https://docs.localstack.cloud/references/configuration/
  #     DEBUG: ${DEBUG:-0}
  #     AWS_DEFAULT_REGION: eu-west-2
  #     SERVICES: sqs, s3
  #     PERSISTENCE: "1"
  #     DATA_DIR: /tmp/localstack/data
  #   volumes:
  #     - "${LOCALSTACK_VOLUME_DIR:-./volume}:/var/lib/localstack"
  #     - "/var/run/docker.sock:/var/run/docker.sock"
  #     - "./localstack_bootstrap:/etc/localstack/init/ready.d/"
  #   healthcheck:
  #     test: ["CMD-SHELL", "awslocal sqs list-queues || exit 1"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #     start_period: 30s

  # # async-request-backend
  # request-api:
  #   container_name: request-api
  #   image: public.ecr.aws/l6z6v3j6/development-pub-async-request-api:main
  #   environment:
  #     PYTHONUNBUFFERED: 1
  #     AWS_ENDPOINT_URL: http://localstack:4566
  #     CELERY_BROKER_URL: sqs://ABCDEFGHIJKLMNOPQRST:ZYXK7NiynGlTogH8Nj+P9nlE73sq3@localstack:4566
  #     AWS_DEFAULT_REGION: eu-west-2
  #     AWS_ACCESS_KEY_ID: example
  #     AWS_SECRET_ACCESS_KEY: example
  #     SQS_QUEUE_NAME: request-queue
  #     DATABASE_URL: postgresql://postgres:password@request-db/request_database
  #   restart: on-failure
  #   ports:
  #     - "8000:8000"
  #   depends_on:
  #       request-db:
  #         condition: service_healthy
  #       localstack:
  #         condition: service_healthy

  # request-processor:
  #   image: public.ecr.aws/l6z6v3j6/development-pub-async-request-processor:main
  #   depends_on:
  #       request-db:
  #         condition: service_healthy
  #       localstack:
  #         condition: service_healthy
  #   environment:
  #     PYTHONUNBUFFERED: 1
  #     AWS_ENDPOINT_URL: http://localstack:4566
  #     AWS_DEFAULT_REGION: eu-west-2
  #     AWS_ACCESS_KEY_ID: example
  #     AWS_SECRET_ACCESS_KEY: example
  #     # CELERY_BROKER_URL: sqs://@sqs.eu-west-2.amazonaws.com
  #     CELERY_BROKER_URL: sqs://example:example@localstack:4566
  #     CELERY_BROKER_REGION: eu-west-2
  #     CELERY_BROKER_IS_SECURE: "false"
  #     DATABASE_URL: postgresql://postgres:password@request-db/request_database
  #     REQUEST_FILES_BUCKET_NAME: dluhc-data-platform-request-files-local
  #   restart: on-failure
  #   deploy:
  #     replicas: 2
  #   volumes:
  #     - "./request-processor-celery/docker_volume:/opt"


  # request-db:
  #   container_name: request-db
  #   image: postgres:15-alpine
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U postgres -d request_database"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #     start_period: 30s
  #   environment:
  #     POSTGRES_PASSWORD: password
  #     POSTGRES_DB: request_database
  #   restart: on-failure
  #   ports:
  #       - "5432:5432"

  # pgadmin4:
  #     container_name: pgadmin4
  #     image: elestio/pgadmin:latest
  #     restart: always
  #     environment:
  #       PGADMIN_DEFAULT_EMAIL: 'local@local.com'
  #       PGADMIN_DEFAULT_PASSWORD: password
  #       PGADMIN_LISTEN_PORT: 8080
  #     ports:
  #     - "8090:8080"

volumes:
  pgdata:
